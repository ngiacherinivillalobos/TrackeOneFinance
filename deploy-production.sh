#!/bin/bash

# TrackeOne Finance - Script de Deploy para Produ√ß√£o
# GitHub ‚Üí Render (Backend + PostgreSQL) ‚Üí Vercel (Frontend)

set -e

echo "üöÄ PREPARANDO DEPLOY PARA PRODU√á√ÉO"
echo "=================================="
echo "Stack: GitHub ‚Üí Render ‚Üí Vercel"
echo ""

# Verificar se est√° no diret√≥rio correto
if [ ! -f "package.json" ] || [ ! -d "client" ] || [ ! -d "server" ]; then
    echo "‚ùå Execute este script na raiz do projeto TrackeOneFinance"
    exit 1
fi

# Verificar se git est√° configurado
if ! command -v git &> /dev/null; then
    echo "‚ùå Git n√£o est√° instalado"
    exit 1
fi

echo "‚úÖ Verifica√ß√µes iniciais conclu√≠das"
echo ""

# Verificar status do git
if [ -n "$(git status --porcelain)" ]; then
    echo "üìù H√° mudan√ßas n√£o commitadas. Commitando automaticamente..."
    
    # Adicionar todos os arquivos
    git add .
    
    # Commit com mensagem autom√°tica
    COMMIT_MSG="üöÄ Deploy ready: Production backup $(date '+%Y%m%d_%H%M%S')"
    git commit -m "$COMMIT_MSG"
    
    echo "‚úÖ Commit criado: $COMMIT_MSG"
else
    echo "‚úÖ Reposit√≥rio git est√° limpo"
fi

echo ""

# Push para GitHub
echo "üì§ Enviando para GitHub..."
git push origin main

echo "‚úÖ C√≥digo enviado para GitHub"
echo ""

# Backup dos dados (se existir)
if [ -f "database/track_one_finance.db" ]; then
    echo "üíæ Criando backup do banco SQLite..."
    BACKUP_NAME="backup_before_production_$(date +%Y%m%d_%H%M%S).sql"
    sqlite3 database/track_one_finance.db .dump > "database/backups/$BACKUP_NAME" 2>/dev/null || echo "‚ö†Ô∏è  Backup SQLite falhou (normal se banco n√£o existir)"
    echo "‚úÖ Backup criado: $BACKUP_NAME"
fi

echo ""
echo "üéØ INSTRU√á√ïES DE DEPLOY MANUAL:"
echo "================================"
echo ""

echo "üìã 1. RENDER (Backend + PostgreSQL):"
echo "   ‚Ä¢ Acesse: https://dashboard.render.com"
echo "   ‚Ä¢ Conecte este reposit√≥rio GitHub"
echo "   ‚Ä¢ Configure o servi√ßo usando o arquivo render.yaml existente"
echo "   ‚Ä¢ O banco PostgreSQL ser√° criado automaticamente"
echo "   ‚Ä¢ Aguarde o deploy completar (~5-10 minutos)"
echo ""

echo "üìã 2. VERCEL (Frontend):"
echo "   ‚Ä¢ Acesse: https://vercel.com/dashboard"
echo "   ‚Ä¢ Conecte este reposit√≥rio GitHub"
echo "   ‚Ä¢ Selecione a pasta 'client' como root directory"
echo "   ‚Ä¢ O deploy ser√° autom√°tico usando vercel.json"
echo ""

echo "üìã 3. CONFIGURA√á√ïES IMPORTANTES:"
echo "   ‚Ä¢ Render URL: https://trackeone-finance-api.onrender.com"
echo "   ‚Ä¢ Vercel URL: https://seu-projeto.vercel.app"
echo "   ‚Ä¢ Database: PostgreSQL autom√°tico no Render"
echo ""

echo "üìã 4. VERIFICA√á√ïES P√ìS-DEPLOY:"
echo "   ‚Ä¢ Teste backend: https://trackeone-finance-api.onrender.com/api/health"
echo "   ‚Ä¢ Teste frontend: https://seu-projeto.vercel.app"
echo "   ‚Ä¢ Verifique logs no Render Dashboard"
echo ""

echo "üìã 5. DADOS INICIAIS:"
echo "   ‚Ä¢ O banco ser√° inicializado automaticamente"
echo "   ‚Ä¢ Categorias, centros de custo e m√©todos de pagamento ser√£o criados"
echo "   ‚Ä¢ Primeiro acesso: criar usu√°rio via frontend"
echo ""

echo "üîß ARQUIVOS DE CONFIGURA√á√ÉO ATUALIZADOS:"
echo "   ‚úÖ render.yaml - Configura√ß√£o do Render"
echo "   ‚úÖ vercel.json - Configura√ß√£o do Vercel"
echo "   ‚úÖ package.json - Scripts de build"
echo "   ‚úÖ database/init_postgresql.sql - Schema PostgreSQL"
echo "   ‚úÖ client/src/services/api.ts - URLs de produ√ß√£o"
echo ""

echo "üéâ PREPARA√á√ÉO CONCLU√çDA!"
echo "========================"
echo ""
echo "‚ö° PR√ìXIMOS PASSOS:"
echo "1. Configure os servi√ßos no Render e Vercel"
echo "2. Aguarde os deploys completarem"
echo "3. Teste a aplica√ß√£o em produ√ß√£o"
echo "4. Configure dom√≠nio personalizado (opcional)"
echo ""

echo "üìû EM CASO DE PROBLEMAS:"
echo "‚Ä¢ Verifique logs no Render Dashboard"
echo "‚Ä¢ Verifique build logs no Vercel"
echo "‚Ä¢ Confirme URLs nos arquivos de configura√ß√£o"
echo ""

echo "‚úÖ Sistema pronto para produ√ß√£o com PostgreSQL!"
