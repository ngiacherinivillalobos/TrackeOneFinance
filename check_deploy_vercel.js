#!/usr/bin/env node

/**
 * VERIFICA√á√ÉO DE DEPLOY - TrackeOne Finance
 * Verifica se o deploy foi aplicado corretamente no Vercel
 */

const axios = require('axios');

async function checkDeployStatus() {
    console.log('üîç VERIFICA√á√ÉO DE DEPLOY - TrackeOne Finance');
    console.log('================================================');
    
    const FRONTEND_URL = 'https://ngvtech.com.br';
    
    try {
        console.log('üåê Testando acesso ao frontend...');
        
        const response = await axios.get(FRONTEND_URL, {
            timeout: 10000,
            headers: {
                'User-Agent': 'Deploy-Checker/1.0',
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache'
            }
        });
        
        console.log(`‚úÖ Frontend acess√≠vel: ${response.status}`);
        console.log(`üìä Tamanho da resposta: ${response.data.length} bytes`);
        
        // Verificar se cont√©m o script principal
        if (response.data.includes('index-') && response.data.includes('.js')) {
            console.log('‚úÖ Scripts JS detectados no HTML');
        } else {
            console.log('‚ö†Ô∏è Scripts JS n√£o detectados');
        }
        
        // Verificar √∫ltimo deploy
        const headers = response.headers;
        console.log('üìã Headers relevantes:');
        console.log(`   - Server: ${headers.server || 'N/A'}`);
        console.log(`   - Date: ${headers.date || 'N/A'}`);
        console.log(`   - Cache-Control: ${headers['cache-control'] || 'N/A'}`);
        
        // Verificar se h√° meta tags atualizadas
        if (response.data.includes('TrackeOne Finance')) {
            console.log('‚úÖ Meta tags do projeto detectadas');
        }
        
        console.log('\nüéØ RECOMENDA√á√ïES:');
        console.log('1. Acesse: https://ngvtech.com.br/clear-cache.html');
        console.log('2. Ou force refresh: Ctrl+F5 (Windows) / Cmd+Shift+R (Mac)');
        console.log('3. Aguarde 2-3 minutos para propaga√ß√£o completa do CDN');
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar deploy:', error.message);
        
        if (error.code === 'ECONNABORTED') {
            console.log('‚è±Ô∏è Timeout - Deploy pode estar em andamento');
        } else if (error.response) {
            console.log(`üîç Status HTTP: ${error.response.status}`);
        } else {
            console.log('üåê Erro de conex√£o - Verifique conectividade');
        }
    }
}

// Executar verifica√ß√£o
checkDeployStatus().catch(console.error);