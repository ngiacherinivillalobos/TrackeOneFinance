#!/bin/bash

# TrackeOneFinance - Backup Completo da Evolu√ß√£o do Projeto
# Data: $(date '+%Y-%m-%d %H:%M:%S')
# Descri√ß√£o: Backup abrangente incluindo c√≥digo, banco de dados, configura√ß√µes e documenta√ß√£o

set -e  # Parar execu√ß√£o em caso de erro

# Configura√ß√µes
PROJECT_NAME="TrackeOneFinance"
BACKUP_DATE=$(date '+%Y%m%d_%H%M%S')
BACKUP_DIR="/Users/nataligiacherini/Development/TrackeOneFinance_BACKUP_EVOLUTION_$BACKUP_DATE"
SOURCE_DIR="/Users/nataligiacherini/Development/TrackeOneFinance"

echo "üöÄ Iniciando backup completo da evolu√ß√£o do $PROJECT_NAME"
echo "üìÖ Data/Hora: $(date '+%Y-%m-%d %H:%M:%S')"
echo "üìÇ Diret√≥rio de backup: $BACKUP_DIR"
echo "üìç Diret√≥rio origem: $SOURCE_DIR"

# Criar diret√≥rio de backup
mkdir -p "$BACKUP_DIR"

# 1. BACKUP DO C√ìDIGO FONTE COMPLETO
echo ""
echo "üìã 1. COPIANDO C√ìDIGO FONTE COMPLETO..."
rsync -av --exclude='node_modules' \
          --exclude='.git' \
          --exclude='dist' \
          --exclude='build' \
          --exclude='.next' \
          --exclude='coverage' \
          --exclude='.nyc_output' \
          --exclude='*.log' \
          --exclude='*.tmp' \
          --exclude='.DS_Store' \
          "$SOURCE_DIR/" "$BACKUP_DIR/source/"

echo "‚úÖ C√≥digo fonte copiado com sucesso"

# 2. BACKUP DO BANCO DE DADOS
echo ""
echo "üóÉÔ∏è 2. FAZENDO BACKUP DO BANCO DE DADOS..."
mkdir -p "$BACKUP_DIR/database"

# Backup do SQLite
if [ -f "$SOURCE_DIR/database/track_one_finance.db" ]; then
    cp "$SOURCE_DIR/database/track_one_finance.db" "$BACKUP_DIR/database/track_one_finance_backup_$BACKUP_DATE.db"
    echo "‚úÖ Backup do banco SQLite criado"
    
    # Criar dump SQL para legibilidade
    sqlite3 "$SOURCE_DIR/database/track_one_finance.db" .dump > "$BACKUP_DIR/database/track_one_finance_dump_$BACKUP_DATE.sql"
    echo "‚úÖ Dump SQL criado"
else
    echo "‚ö†Ô∏è Banco de dados SQLite n√£o encontrado"
fi

# Backup de outros arquivos de banco se existirem
if [ -f "$SOURCE_DIR/server/database/track_one_finance.db" ]; then
    cp "$SOURCE_DIR/server/database/track_one_finance.db" "$BACKUP_DIR/database/server_track_one_finance_backup_$BACKUP_DATE.db"
    echo "‚úÖ Backup do banco do servidor criado"
fi

# 3. BACKUP DA DOCUMENTA√á√ÉO E LOGS
echo ""
echo "üìö 3. COPIANDO DOCUMENTA√á√ÉO E LOGS..."
mkdir -p "$BACKUP_DIR/documentation"

# Copiar todos os arquivos de documenta√ß√£o
find "$SOURCE_DIR" -maxdepth 1 -name "*.md" -exec cp {} "$BACKUP_DIR/documentation/" \;
find "$SOURCE_DIR" -maxdepth 1 -name "*.txt" -exec cp {} "$BACKUP_DIR/documentation/" \;
find "$SOURCE_DIR" -maxdepth 1 -name "*README*" -exec cp {} "$BACKUP_DIR/documentation/" \;
find "$SOURCE_DIR" -maxdepth 1 -name "*DEPLOY*" -exec cp {} "$BACKUP_DIR/documentation/" \;
find "$SOURCE_DIR" -maxdepth 1 -name "*BACKUP*" -exec cp {} "$BACKUP_DIR/documentation/" \;
find "$SOURCE_DIR" -maxdepth 1 -name "*GUIDE*" -exec cp {} "$BACKUP_DIR/documentation/" \;
find "$SOURCE_DIR" -maxdepth 1 -name "*MILESTONE*" -exec cp {} "$BACKUP_DIR/documentation/" \;

echo "‚úÖ Documenta√ß√£o copiada"

# 4. INFORMA√á√ïES DO SISTEMA E DEPEND√äNCIAS
echo ""
echo "üîß 4. COLETANDO INFORMA√á√ïES DO SISTEMA..."
mkdir -p "$BACKUP_DIR/system_info"

# Informa√ß√µes do Node.js
echo "Node.js Version:" > "$BACKUP_DIR/system_info/system_info.txt"
node --version >> "$BACKUP_DIR/system_info/system_info.txt" 2>/dev/null || echo "Node.js n√£o encontrado" >> "$BACKUP_DIR/system_info/system_info.txt"

echo "" >> "$BACKUP_DIR/system_info/system_info.txt"
echo "NPM Version:" >> "$BACKUP_DIR/system_info/system_info.txt"
npm --version >> "$BACKUP_DIR/system_info/system_info.txt" 2>/dev/null || echo "NPM n√£o encontrado" >> "$BACKUP_DIR/system_info/system_info.txt"

echo "" >> "$BACKUP_DIR/system_info/system_info.txt"
echo "Sistema Operacional:" >> "$BACKUP_DIR/system_info/system_info.txt"
uname -a >> "$BACKUP_DIR/system_info/system_info.txt"

# Backup dos package.json
if [ -f "$SOURCE_DIR/package.json" ]; then
    cp "$SOURCE_DIR/package.json" "$BACKUP_DIR/system_info/root_package.json"
fi

if [ -f "$SOURCE_DIR/server/package.json" ]; then
    cp "$SOURCE_DIR/server/package.json" "$BACKUP_DIR/system_info/server_package.json"
fi

if [ -f "$SOURCE_DIR/client/package.json" ]; then
    cp "$SOURCE_DIR/client/package.json" "$BACKUP_DIR/system_info/client_package.json"
fi

echo "‚úÖ Informa√ß√µes do sistema coletadas"

# 5. ESTRUTURA DO PROJETO
echo ""
echo "üèóÔ∏è 5. DOCUMENTANDO ESTRUTURA DO PROJETO..."

# Criar √°rvore de arquivos
tree "$SOURCE_DIR" -I 'node_modules|.git|dist|build|.next|coverage' > "$BACKUP_DIR/system_info/project_structure.txt" 2>/dev/null || \
find "$SOURCE_DIR" -type f -not -path "*/node_modules/*" -not -path "*/.git/*" -not -path "*/dist/*" -not -path "*/build/*" > "$BACKUP_DIR/system_info/file_list.txt"

echo "‚úÖ Estrutura do projeto documentada"

# 6. BACKUP DOS SCRIPTS E CONFIGURA√á√ïES
echo ""
echo "‚öôÔ∏è 6. COPIANDO SCRIPTS E CONFIGURA√á√ïES..."
mkdir -p "$BACKUP_DIR/scripts"

# Copiar scripts de deploy e backup
find "$SOURCE_DIR" -maxdepth 1 -name "*.sh" -exec cp {} "$BACKUP_DIR/scripts/" \;
find "$SOURCE_DIR" -maxdepth 1 -name "*.js" -name "*check*" -exec cp {} "$BACKUP_DIR/scripts/" \; 2>/dev/null || true
find "$SOURCE_DIR" -maxdepth 1 -name "*.js" -name "*deploy*" -exec cp {} "$BACKUP_DIR/scripts/" \; 2>/dev/null || true
find "$SOURCE_DIR" -maxdepth 1 -name "*.js" -name "*backup*" -exec cp {} "$BACKUP_DIR/scripts/" \; 2>/dev/null || true

# Copiar arquivos de configura√ß√£o
if [ -f "$SOURCE_DIR/docker-compose.yml" ]; then
    cp "$SOURCE_DIR/docker-compose.yml" "$BACKUP_DIR/scripts/"
fi

if [ -f "$SOURCE_DIR/nginx.conf" ]; then
    cp "$SOURCE_DIR/nginx.conf" "$BACKUP_DIR/scripts/"
fi

if [ -f "$SOURCE_DIR/render.yaml" ]; then
    cp "$SOURCE_DIR/render.yaml" "$BACKUP_DIR/scripts/"
fi

echo "‚úÖ Scripts e configura√ß√µes copiados"

# 7. ESTAT√çSTICAS DO BANCO DE DADOS
echo ""
echo "üìä 7. COLETANDO ESTAT√çSTICAS DO BANCO..."

if [ -f "$SOURCE_DIR/database/track_one_finance.db" ]; then
    {
        echo "=== ESTAT√çSTICAS DO BANCO DE DADOS ==="
        echo "Data do backup: $(date)"
        echo ""
        
        echo "=== TABELAS ==="
        sqlite3 "$SOURCE_DIR/database/track_one_finance.db" ".tables"
        echo ""
        
        echo "=== CONTAGEM DE REGISTROS ==="
        sqlite3 "$SOURCE_DIR/database/track_one_finance.db" "SELECT 'transactions', COUNT(*) FROM transactions;"
        sqlite3 "$SOURCE_DIR/database/track_one_finance.db" "SELECT 'users', COUNT(*) FROM users;" 2>/dev/null || echo "Tabela users n√£o existe"
        sqlite3 "$SOURCE_DIR/database/track_one_finance.db" "SELECT 'categories', COUNT(*) FROM categories;" 2>/dev/null || echo "Tabela categories n√£o existe"
        sqlite3 "$SOURCE_DIR/database/track_one_finance.db" "SELECT 'contacts', COUNT(*) FROM contacts;" 2>/dev/null || echo "Tabela contacts n√£o existe"
        echo ""
        
        echo "=== √öLTIMAS TRANSA√á√ïES ==="
        sqlite3 "$SOURCE_DIR/database/track_one_finance.db" "SELECT id, description, amount, type, transaction_date FROM transactions ORDER BY created_at DESC LIMIT 10;" 2>/dev/null || echo "Erro ao buscar transa√ß√µes"
        echo ""
        
        echo "=== RESUMO POR TIPO ==="
        sqlite3 "$SOURCE_DIR/database/track_one_finance.db" "SELECT type, COUNT(*), SUM(amount) FROM transactions GROUP BY type;" 2>/dev/null || echo "Erro ao calcular resumo"
        
    } > "$BACKUP_DIR/database/database_statistics.txt"
    
    echo "‚úÖ Estat√≠sticas do banco coletadas"
else
    echo "‚ö†Ô∏è Banco n√£o encontrado para estat√≠sticas"
fi

# 8. RELAT√ìRIO FINAL
echo ""
echo "üìã 8. GERANDO RELAT√ìRIO FINAL..."

{
    echo "====================================================================="
    echo "RELAT√ìRIO DE BACKUP COMPLETO - TRACKEONE FINANCE"
    echo "====================================================================="
    echo ""
    echo "üìÖ Data/Hora do Backup: $(date '+%Y-%m-%d %H:%M:%S')"
    echo "üè∑Ô∏è Nome do Backup: TrackeOneFinance_BACKUP_EVOLUTION_$BACKUP_DATE"
    echo "üìÇ Local do Backup: $BACKUP_DIR"
    echo "üìç Projeto Original: $SOURCE_DIR"
    echo ""
    echo "====================================================================="
    echo "ESTRUTURA DO BACKUP:"
    echo "====================================================================="
    echo ""
    echo "üìÅ source/              - C√≥digo fonte completo (exceto node_modules)"
    echo "üìÅ database/            - Backup do banco SQLite + dump SQL"
    echo "üìÅ documentation/       - Todos os arquivos .md, guias e documenta√ß√£o"
    echo "üìÅ scripts/             - Scripts de deploy, backup e configura√ß√µes"
    echo "üìÅ system_info/         - Informa√ß√µes do sistema, depend√™ncias e estrutura"
    echo ""
    echo "====================================================================="
    echo "ARQUIVOS IMPORTANTES INCLU√çDOS:"
    echo "====================================================================="
    echo ""
    echo "üóÉÔ∏è BANCO DE DADOS:"
    ls -la "$BACKUP_DIR/database/" 2>/dev/null || echo "Nenhum arquivo de banco encontrado"
    echo ""
    echo "üìö DOCUMENTA√á√ÉO:"
    ls -la "$BACKUP_DIR/documentation/" | head -20
    echo ""
    echo "‚öôÔ∏è SCRIPTS:"
    ls -la "$BACKUP_DIR/scripts/" 2>/dev/null || echo "Nenhum script encontrado"
    echo ""
    echo "====================================================================="
    echo "TAMANHO DO BACKUP:"
    echo "====================================================================="
    echo ""
    du -sh "$BACKUP_DIR"
    echo ""
    echo "====================================================================="
    echo "VERIFICA√á√ÉO DE INTEGRIDADE:"
    echo "====================================================================="
    echo ""
    echo "Total de arquivos copiados: $(find "$BACKUP_DIR" -type f | wc -l)"
    echo "Total de diret√≥rios criados: $(find "$BACKUP_DIR" -type d | wc -l)"
    echo ""
    echo "====================================================================="
    echo "PRINCIPAIS FUNCIONALIDADES PRESERVADAS:"
    echo "====================================================================="
    echo ""
    echo "‚úÖ Sistema de autentica√ß√£o e autoriza√ß√£o"
    echo "‚úÖ Controle Mensal com filtros avan√ßados"
    echo "‚úÖ Dashboard com totalizadores corrigidos"
    echo "‚úÖ Sistema de pagamento de transa√ß√µes"
    echo "‚úÖ Gest√£o de categorias, subcategorias e contatos"
    echo "‚úÖ Gest√£o de centros de custo"
    echo "‚úÖ Sistema de metas de economia"
    echo "‚úÖ Fluxo de caixa integrado"
    echo "‚úÖ Configura√ß√µes de contas banc√°rias"
    echo "‚úÖ Sistema responsivo com Material-UI"
    echo "‚úÖ API REST completa com SQLite"
    echo "‚úÖ Deployment configurado para Render"
    echo ""
    echo "====================================================================="
    echo "MELHORIAS RECENTES IMPLEMENTADAS:"
    echo "====================================================================="
    echo ""
    echo "üîß Corre√ß√£o dos totalizadores (Receitas e Despesas do M√™s)"
    echo "üîß Ajuste do totalizador 'Economizado at√© agora'"
    echo "üîß Separa√ß√£o de dados filtrados vs. n√£o filtrados"
    echo "üîß Melhoria na consist√™ncia entre ambientes (dev/prod)"
    echo "üîß Otimiza√ß√£o das consultas de transa√ß√µes"
    echo ""
    echo "====================================================================="
    echo "INSTRU√á√ïES DE RESTAURA√á√ÉO:"
    echo "====================================================================="
    echo ""
    echo "1. Extrair o backup para o local desejado"
    echo "2. Navegar at√© o diret√≥rio source/"
    echo "3. Instalar depend√™ncias: npm install (raiz, server/ e client/)"
    echo "4. Restaurar banco de dados da pasta database/"
    echo "5. Configurar vari√°veis de ambiente se necess√°rio"
    echo "6. Executar: npm run dev"
    echo ""
    echo "====================================================================="
    echo "BACKUP CONCLU√çDO COM SUCESSO!"
    echo "====================================================================="
    echo ""
    echo "üìß Em caso de d√∫vidas, verificar a documenta√ß√£o em documentation/"
    echo "üîç Para logs detalhados, verificar os arquivos *.md do projeto"
    echo ""
    echo "Backup finalizado em: $(date '+%Y-%m-%d %H:%M:%S')"
    echo ""
    
} > "$BACKUP_DIR/BACKUP_REPORT.txt"

# 9. CRIAR ARQUIVO COMPACTADO
echo ""
echo "üì¶ 9. COMPACTANDO BACKUP..."

cd "/Users/nataligiacherini/Development"
tar -czf "TrackeOneFinance_BACKUP_EVOLUTION_${BACKUP_DATE}.tar.gz" "TrackeOneFinance_BACKUP_EVOLUTION_$BACKUP_DATE"

BACKUP_SIZE=$(du -sh "TrackeOneFinance_BACKUP_EVOLUTION_${BACKUP_DATE}.tar.gz" | cut -f1)

echo "‚úÖ Backup compactado criado: TrackeOneFinance_BACKUP_EVOLUTION_${BACKUP_DATE}.tar.gz"
echo "üìè Tamanho do arquivo: $BACKUP_SIZE"

# 10. RESUMO FINAL
echo ""
echo "üéâ =========================================="
echo "üéâ BACKUP COMPLETO FINALIZADO COM SUCESSO!"
echo "üéâ =========================================="
echo ""
echo "üìÖ Data: $(date '+%Y-%m-%d %H:%M:%S')"
echo "üìÅ Pasta do backup: $BACKUP_DIR"
echo "üì¶ Arquivo compactado: TrackeOneFinance_BACKUP_EVOLUTION_${BACKUP_DATE}.tar.gz"
echo "üìè Tamanho: $BACKUP_SIZE"
echo ""
echo "üìã Relat√≥rio completo dispon√≠vel em:"
echo "    $BACKUP_DIR/BACKUP_REPORT.txt"
echo ""
echo "‚ú® O backup inclui:"
echo "   ‚Ä¢ C√≥digo fonte completo"
echo "   ‚Ä¢ Banco de dados SQLite + dump SQL"
echo "   ‚Ä¢ Toda documenta√ß√£o e guias"
echo "   ‚Ä¢ Scripts de deploy e configura√ß√£o"
echo "   ‚Ä¢ Informa√ß√µes do sistema e depend√™ncias"
echo "   ‚Ä¢ Estat√≠sticas do banco de dados"
echo ""
echo "üöÄ Projeto TrackeOneFinance totalmente preservado!"
echo ""