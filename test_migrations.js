#!/usr/bin/env node

// Script para verificar se h√° problemas com as migra√ß√µes
const fs = require('fs');
const path = require('path');

function checkMigrations() {
  try {
    console.log('üîç Verificando arquivos de migra√ß√£o...');
    
    // Diret√≥rio de migra√ß√µes
    const migrationsDir = path.resolve(__dirname, 'database', 'migrations');
    
    if (!fs.existsSync(migrationsDir)) {
      console.error('‚ùå Diret√≥rio de migra√ß√µes n√£o encontrado:', migrationsDir);
      process.exit(1);
    }
    
    // Listar arquivos de migra√ß√£o
    const migrationFiles = fs.readdirSync(migrationsDir)
      .filter(file => file.endsWith('.sql'))
      .sort();
    
    console.log(`\nüìÅ Encontrados ${migrationFiles.length} arquivos de migra√ß√£o:`);
    migrationFiles.forEach(file => {
      console.log(`  - ${file}`);
    });
    
    // Verificar se h√° migra√ß√µes espec√≠ficas para PostgreSQL e SQLite
    const postgresMigrations = migrationFiles.filter(file => file.includes('_postgres.sql'));
    const sqliteMigrations = migrationFiles.filter(file => 
      file.endsWith('.sql') && !file.includes('_postgres.sql') && !file.includes('_sqlite.sql')
    );
    
    console.log(`\nüêò Migra√ß√µes espec√≠ficas para PostgreSQL: ${postgresMigrations.length}`);
    postgresMigrations.forEach(file => {
      console.log(`  - ${file}`);
    });
    
    console.log(`\nüê¢ Migra√ß√µes para SQLite: ${sqliteMigrations.length}`);
    sqliteMigrations.forEach(file => {
      console.log(`  - ${file}`);
    });
    
    // Verificar pares de migra√ß√µes
    console.log('\nüîç Verificando pares de migra√ß√µes...');
    const migrationPairs = new Map();
    
    sqliteMigrations.forEach(sqliteFile => {
      const baseName = sqliteFile.replace('.sql', '');
      const postgresFile = `${baseName}_postgres.sql`;
      
      migrationPairs.set(baseName, {
        sqlite: sqliteFile,
        postgres: postgresMigrations.includes(postgresFile) ? postgresFile : null
      });
    });
    
    // Adicionar migra√ß√µes espec√≠ficas do PostgreSQL que n√£o t√™m equivalentes SQLite
    postgresMigrations.forEach(postgresFile => {
      const baseName = postgresFile.replace('_postgres.sql', '');
      if (!migrationPairs.has(baseName)) {
        migrationPairs.set(baseName, {
          sqlite: null,
          postgres: postgresFile
        });
      }
    });
    
    console.log('\nüîó Pares de migra√ß√µes encontrados:');
    migrationPairs.forEach((pair, baseName) => {
      console.log(`  ${baseName}:`);
      console.log(`    SQLite: ${pair.sqlite || '‚ùå N√£o encontrado'}`);
      console.log(`    PostgreSQL: ${pair.postgres || '‚ùå N√£o encontrado'}`);
      
      // Verificar se ambos existem
      if (pair.sqlite && !pair.postgres) {
        console.log(`    ‚ö†Ô∏è  Aviso: Migra√ß√£o SQLite existe mas PostgreSQL n√£o`);
      } else if (!pair.sqlite && pair.postgres) {
        console.log(`    ‚ÑπÔ∏è  Info: Migra√ß√£o espec√≠fica para PostgreSQL apenas`);
      } else if (pair.sqlite && pair.postgres) {
        console.log(`    ‚úÖ OK: Ambas as migra√ß√µes existem`);
      }
    });
    
    console.log('\n‚úÖ Verifica√ß√£o de migra√ß√µes conclu√≠da com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro ao verificar migra√ß√µes:', error);
    process.exit(1);
  }
}

checkMigrations();