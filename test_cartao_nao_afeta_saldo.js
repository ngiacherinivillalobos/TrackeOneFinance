// Teste cr√≠tico: pagamento com cart√£o N√ÉO deve afetar saldo de conta corrente
const https = require('https');
const http = require('http');
const { URL } = require('url');

const baseURL = 'http://localhost:3001';

// Token JWT v√°lido
const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTQsImVtYWlsIjoidGVzdDJAZXhhbXBsZS5jb20iLCJjb3N0X2NlbnRlcl9pZCI6bnVsbCwiaWF0IjoxNzU5MTcxMjc3LCJleHAiOjE3NjE3NjMyNzd9.PCb14cGrmtvjK0zgF-EGravY40Ql1Jkny3svmhJKfiU';

// Fun√ß√£o helper para fazer requisi√ß√µes HTTP
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const isHttps = urlObj.protocol === 'https:';
    const httpModule = isHttps ? https : http;
    
    const requestOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port || (isHttps ? 443 : 80),
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
        ...options.headers
      }
    };
    
    const req = httpModule.request(requestOptions, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({ 
            ok: res.statusCode >= 200 && res.statusCode < 300,
            status: res.statusCode,
            data: jsonData
          });
        } catch (e) {
          resolve({ 
            ok: res.statusCode >= 200 && res.statusCode < 300,
            status: res.statusCode,
            data: data
          });
        }
      });
    });
    
    req.on('error', (err) => {
      reject(err);
    });
    
    if (options.body) {
      req.write(JSON.stringify(options.body));
    }
    
    req.end();
  });
}

async function testCartaoNaoAfetaSaldo() {
  try {
    console.log('üß™ Teste CR√çTICO: Pagamento com cart√£o N√ÉO deve afetar saldo de conta corrente...');
    
    // 1. Pegar conta de teste
    const accountsResponse = await makeRequest(`${baseURL}/api/bank-accounts`);
    const accounts = accountsResponse.data;
    const testAccount = accounts[0];
    console.log('‚úÖ Conta para teste:', testAccount.name);
    
    // 2. Verificar saldo INICIAL
    const balanceInitialResponse = await makeRequest(`${baseURL}/api/bank-accounts/${testAccount.id}/balance`);
    const balanceInitial = balanceInitialResponse.data;
    console.log('\nüí∞ Saldo INICIAL da conta corrente:', {
      current_balance: balanceInitial.current_balance,
      total_movements: balanceInitial.total_movements
    });
    
    // 3. Criar uma despesa vinculada √† conta corrente
    console.log('\nüìù Criando DESPESA vinculada √† conta corrente...');
    
    const transactionData = {
      description: "Despesa Teste - Pagar com Cart√£o",
      amount: 1200,
      type: "expense",
      category_id: 25, // Alimenta√ß√£o
      contact_id: 17, // Dog Food Natural
      cost_center_id: 1,
      transaction_date: "2024-10-01",
      is_paid: false,
      bank_account_id: testAccount.id // IMPORTANTE: transa√ß√£o vinculada √† conta
    };
    
    const createResponse = await makeRequest(`${baseURL}/api/transactions`, {
      method: 'POST',
      body: transactionData
    });
    
    const transaction = createResponse.data.transaction;
    console.log('‚úÖ Despesa criada (ID):', transaction.id);
    console.log('üí° Transa√ß√£o vinculada √† conta:', testAccount.name);
    
    // 4. Marcar como paga com CART√ÉO DE CR√âDITO
    console.log('\nüí≥ Marcando como paga com CART√ÉO DE CR√âDITO...');
    console.log('üö® CR√çTICO: Saldo da conta corrente N√ÉO deve mudar!');
    
    const paymentData = {
      payment_date: "2024-10-01",
      paid_amount: 1200,
      payment_type: "credit_card", // CART√ÉO - N√ÉO DEVE AFETAR SALDO
      card_id: 5,
      observations: "Pago com cart√£o - saldo conta N√ÉO deve mudar"
    };
    
    const paymentResponse = await makeRequest(`${baseURL}/api/transactions/${transaction.id}/mark-as-paid`, {
      method: 'POST',
      body: paymentData
    });
    
    if (!paymentResponse.ok) {
      throw new Error(`Erro ao marcar como pago: ${paymentResponse.status} - ${JSON.stringify(paymentResponse.data)}`);
    }
    
    console.log('‚úÖ Transa√ß√£o marcada como paga com cart√£o');
    
    // 5. Verificar transa√ß√£o atualizada
    console.log('\nüîç Verificando dados da transa√ß√£o ap√≥s pagamento...');
    
    const transactionAfterResponse = await makeRequest(`${baseURL}/api/transactions`);
    const transactions = transactionAfterResponse.data;
    const updatedTransaction = transactions.find(t => t.id === transaction.id);
    
    if (updatedTransaction) {
      console.log('üìã Transa√ß√£o ap√≥s pagamento:', {
        id: updatedTransaction.id,
        description: updatedTransaction.description,
        payment_type: updatedTransaction.payment_type,
        bank_account_id: updatedTransaction.bank_account_id,
        card_id: updatedTransaction.card_id,
        is_paid: updatedTransaction.is_paid
      });
      
      // VERIFICA√á√ÉO CR√çTICA
      if (updatedTransaction.bank_account_id !== null) {
        console.log('‚ùå ERRO CR√çTICO: bank_account_id deveria ser NULL para pagamento com cart√£o!');
      } else {
        console.log('‚úÖ Correto: bank_account_id √© NULL para pagamento com cart√£o');
      }
    }
    
    // 6. Verificar saldo AP√ìS PAGAMENTO COM CART√ÉO
    const balanceFinalResponse = await makeRequest(`${baseURL}/api/bank-accounts/${testAccount.id}/balance`);
    const balanceFinal = balanceFinalResponse.data;
    console.log('\nüí∞ Saldo AP√ìS pagamento com cart√£o:', {
      current_balance: balanceFinal.current_balance,
      total_movements: balanceFinal.total_movements
    });
    
    // 7. VALIDA√á√ÉO CR√çTICA
    const saldoMudou = balanceFinal.current_balance !== balanceInitial.current_balance;
    const movimentoMudou = balanceFinal.total_movements !== balanceInitial.total_movements;
    
    console.log('\nüìä AN√ÅLISE CR√çTICA:');
    console.log(`‚Ä¢ Despesa R$ ${transactionData.amount} paga com CART√ÉO`);
    console.log(`‚Ä¢ Saldo inicial: R$ ${balanceInitial.current_balance}`);
    console.log(`‚Ä¢ Saldo final: R$ ${balanceFinal.current_balance}`);
    console.log(`‚Ä¢ Saldo mudou: ${saldoMudou ? 'SIM ‚ùå ERRO!' : 'N√ÉO ‚úÖ CORRETO'}`);
    console.log(`‚Ä¢ Movimento mudou: ${movimentoMudou ? 'SIM ‚ùå ERRO!' : 'N√ÉO ‚úÖ CORRETO'}`);
    
    if (!saldoMudou && !movimentoMudou) {
      console.log('\nüéâ SUCESSO TOTAL: Pagamento com cart√£o N√ÉO afetou saldo da conta corrente!');
      console.log('‚úÖ L√≥gica funcionando corretamente');
      console.log('‚úÖ Saldo da conta corrente preservado');
    } else {
      console.log('\nüö® FALHA CR√çTICA: Pagamento com cart√£o AFETOU saldo da conta corrente!');
      console.log('‚ùå Isso est√° ERRADO - cart√£o n√£o deve mexer no saldo da conta');
      console.log(`Diferen√ßa no saldo: R$ ${balanceFinal.current_balance - balanceInitial.current_balance}`);
      console.log(`Diferen√ßa no movimento: R$ ${balanceFinal.total_movements - balanceInitial.total_movements}`);
    }
    
    // 8. Verificar se transa√ß√£o foi criada no cart√£o
    console.log('\nüí≥ Verificando se transa√ß√£o foi criada no cart√£o...');
    
    const cardTransactionsResponse = await makeRequest(`${baseURL}/api/credit-card-transactions`);
    const cardTransactions = cardTransactionsResponse.data;
    
    const createdInCard = cardTransactions.find(ct => 
      ct.card_id === 5 && 
      ct.payment_observations && 
      ct.payment_observations.includes(`transa√ß√£o #${transaction.id}`)
    );
    
    if (createdInCard) {
      console.log('‚úÖ Transa√ß√£o criada corretamente no cart√£o:', {
        id: createdInCard.id,
        description: createdInCard.description,
        amount: createdInCard.amount,
        due_date: createdInCard.due_date
      });
    } else {
      console.log('‚ùå Transa√ß√£o N√ÉO foi criada no cart√£o');
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  }
}

// Executar o teste
testCartaoNaoAfetaSaldo();