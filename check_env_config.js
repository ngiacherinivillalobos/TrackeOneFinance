const fs = require('fs');
const path = require('path');

// Fun√ß√£o para verificar se um arquivo .env existe e tem conte√∫do
function checkEnvFile(filePath, requiredVars = []) {
  console.log(`\nVerificando arquivo: ${filePath}`);
  
  if (!fs.existsSync(filePath)) {
    console.log('‚ùå Arquivo n√£o encontrado');
    return false;
  }
  
  const content = fs.readFileSync(filePath, 'utf8');
  console.log('‚úÖ Arquivo encontrado');
  
  if (content.trim() === '') {
    console.log('‚ö†Ô∏è  Arquivo est√° vazio');
    return false;
  }
  
  console.log('‚úÖ Arquivo tem conte√∫do');
  
  // Verificar vari√°veis obrigat√≥rias
  for (const varName of requiredVars) {
    if (!content.includes(varName)) {
      console.log(`‚ö†Ô∏è  Vari√°vel obrigat√≥ria n√£o encontrada: ${varName}`);
    } else {
      console.log(`‚úÖ Vari√°vel encontrada: ${varName}`);
    }
  }
  
  return true;
}

// Fun√ß√£o para verificar a configura√ß√£o geral
function checkConfiguration() {
  console.log('=== Verifica√ß√£o de Configura√ß√£o do Ambiente ===');
  
  // Verificar .env do servidor
  const serverEnvPath = path.join(__dirname, 'server', '.env');
  const serverRequiredVars = ['JWT_SECRET', 'PORT', 'NODE_ENV'];
  const serverEnvOk = checkEnvFile(serverEnvPath, serverRequiredVars);
  
  // Verificar .env do cliente
  const clientEnvPath = path.join(__dirname, 'client', '.env');
  const clientRequiredVars = ['VITE_API_URL'];
  const clientEnvOk = checkEnvFile(clientEnvPath, clientRequiredVars);
  
  // Verificar package.json
  const packageJsonPath = path.join(__dirname, 'package.json');
  console.log(`\nVerificando arquivo: ${packageJsonPath}`);
  if (fs.existsSync(packageJsonPath)) {
    console.log('‚úÖ package.json encontrado');
  } else {
    console.log('‚ùå package.json n√£o encontrado');
  }
  
  // Verificar diret√≥rios
  const requiredDirs = ['server', 'client', 'database'];
  for (const dir of requiredDirs) {
    const dirPath = path.join(__dirname, dir);
    console.log(`\nVerificando diret√≥rio: ${dirPath}`);
    if (fs.existsSync(dirPath)) {
      console.log('‚úÖ Diret√≥rio encontrado');
    } else {
      console.log('‚ùå Diret√≥rio n√£o encontrado');
    }
  }
  
  // Resumo
  console.log('\n=== Resumo ===');
  console.log(`.env do servidor: ${serverEnvOk ? '‚úÖ OK' : '‚ùå Problemas'}`);
  console.log(`.env do cliente: ${clientEnvOk ? '‚úÖ OK' : '‚ùå Problemas'}`);
  
  if (serverEnvOk && clientEnvOk) {
    console.log('\nüéâ Configura√ß√£o conclu√≠da com sucesso!');
    console.log('Voc√™ pode agora executar "npm run dev" para iniciar a aplica√ß√£o.');
  } else {
    console.log('\n‚ö†Ô∏è  Existem problemas na configura√ß√£o.');
    console.log('Por favor, verifique os arquivos .env e siga as instru√ß√µes no README.md.');
  }
}

// Executar verifica√ß√£o
checkConfiguration();