#!/bin/bash

echo "üöÄ Aplicando corre√ß√µes para problemas em produ√ß√£o"
echo "============================================="

# 1. Corrigir filtros padr√£o no MonthlyControl
echo "üîß Corrigindo filtros padr√£o no MonthlyControl..."
sed -i '' 's/payment_status_id: \[.overdue.\]/payment_status_id: \["overdue", "open"\]/' client/src/pages/MonthlyControl.tsx

# 2. Corrigir processamento de data no SavingsGoalController
echo "üîß Corrigindo processamento de data no SavingsGoalController..."
sed -i '' 's/\/\/ Para PostgreSQL em produ√ß√£o, adicionar indicador de timezone UTC para evitar convers√£o/\/\/ Para ambos os ambientes, usar a data como est√° para evitar convers√£o de timezone/' server/src/controllers/SavingsGoalController.ts
sed -i '' 's/if (isProduction) {/\/\//g' server/src/controllers/SavingsGoalController.ts
sed -i '' 's/\/\/ Em produ√ß√£o (PostgreSQL), usar apenas a data sem timezone para evitar convers√£o/processedDate = target_date; \/\/ Manter como YYYY-MM-DD/' server/src/controllers/SavingsGoalController.ts
sed -i '' 's/} else {/\/\//g' server/src/controllers/SavingsGoalController.ts
sed -i '' 's/\/\/ Em desenvolvimento (SQLite), usar como est√°/\/\//g' server/src/controllers/SavingsGoalController.ts

# 3. Corrigir exibi√ß√£o de data no Dashboard
echo "üîß Corrigindo exibi√ß√£o de data no Dashboard..."
sed -i '' 's/`Prazo: \$\{formatToBrazilianDate(savingsGoal.target_date)\}`/`Prazo: \$\{formatToBrazilianDate(createSafeDate(savingsGoal.target_date))\}`/' client/src/pages/Dashboard.tsx

echo "‚úÖ Todas as corre√ß√µes foram aplicadas!"
echo ""
echo "üìã Pr√≥ximos passos:"
echo "1. git add ."
echo "2. git commit -m 'Corre√ß√µes para problemas em produ√ß√£o'"
echo "3. git push origin main"
echo "4. Verificar deploy no Vercel e Render"