const { Pool } = require('pg');
const bcrypt = require('bcrypt');

// Configura√ß√£o do pool de conex√£o com o PostgreSQL (igual ao apply_postgres_migrations.js)
const pool = new Pool({
  connectionString: "postgresql://trackone_user:jFaP2T3NXFVR5Vd6XECePPxkH1VaX5Rz@dpg-cs1q4cbv2p9s73b7nm9g-a.oregon-postgres.render.com/trackone_finance",
  ssl: {
    rejectUnauthorized: false
  }
});

async function seedEssentialData() {
  let client;
  try {
    console.log('üîÑ Conectando ao banco de produ√ß√£o...');
    client = await pool.connect();
    console.log('‚úÖ Conectado ao PostgreSQL');

    // Verificar se j√° existem usu√°rios
    const userCheck = await client.query('SELECT COUNT(*) as total FROM users');
    console.log(`üìä Total de usu√°rios existentes: ${userCheck.rows[0].total}`);

    // 1. CRIAR USU√ÅRIO ADMIN
    console.log('\n=== CRIANDO USU√ÅRIO ADMIN ===');
    const adminPassword = await bcrypt.hash('admin123', 12);
    
    await client.query(`
      INSERT INTO users (name, email, password, is_admin, created_at)
      VALUES ($1, $2, $3, $4, NOW())
      ON CONFLICT (email) DO UPDATE SET
        password = EXCLUDED.password,
        name = EXCLUDED.name,
        is_admin = EXCLUDED.is_admin,
        updated_at = NOW()
    `, ['Administrador', 'admin@example.com', adminPassword, true]);
    console.log('‚úÖ Usu√°rio admin criado');

    // 2. POPULAR CATEGORIAS B√ÅSICAS
    console.log('\n=== CRIANDO CATEGORIAS ===');
    const categories = ['Alimenta√ß√£o', 'Transporte', 'Moradia', 'Sa√∫de', 'Lazer', 'Outros'];
    
    for (const cat of categories) {
      await client.query(`
        INSERT INTO categories (name, created_at)
        VALUES ($1, NOW())
        ON CONFLICT (name) DO NOTHING
      `, [cat]);
    }
    console.log('‚úÖ Categorias criadas');

    // 3. POPULAR STATUS DE PAGAMENTO
    console.log('\n=== CRIANDO STATUS DE PAGAMENTO ===');
    const statuses = ['Pendente', 'Pago', 'Vencido'];
    
    for (const status of statuses) {
      await client.query(`
        INSERT INTO payment_status (name, created_at)
        VALUES ($1, NOW())
        ON CONFLICT (name) DO NOTHING
      `, [status]);
    }
    console.log('‚úÖ Status de pagamento criados');

    // 4. POPULAR CENTROS DE CUSTO
    console.log('\n=== CRIANDO CENTROS DE CUSTO ===');
    const costCenters = ['Pessoal', 'Empresa'];
    
    for (const cc of costCenters) {
      await client.query(`
        INSERT INTO cost_centers (name, created_at)
        VALUES ($1, NOW())
        ON CONFLICT (name) DO NOTHING
      `, [cc]);
    }
    console.log('‚úÖ Centros de custo criados');

    // Verificar dados inseridos
    console.log('\n=== VERIFICANDO DADOS ===');
    const finalUserCount = await client.query('SELECT COUNT(*) as total FROM users');
    const categoryCount = await client.query('SELECT COUNT(*) as total FROM categories');
    const statusCount = await client.query('SELECT COUNT(*) as total FROM payment_status');
    const costCenterCount = await client.query('SELECT COUNT(*) as total FROM cost_centers');

    console.log(`üë• Total de usu√°rios: ${finalUserCount.rows[0].total}`);
    console.log(`üìÇ Total de categorias: ${categoryCount.rows[0].total}`);
    console.log(`üìã Total de status: ${statusCount.rows[0].total}`);
    console.log(`üè¢ Total de centros de custo: ${costCenterCount.rows[0].total}`);

    console.log('\nüéâ DADOS ESSENCIAIS POPULADOS COM SUCESSO!');
    console.log('\n=== CREDENCIAIS DE LOGIN ===');
    console.log('üìß Email: admin@example.com');
    console.log('üîë Senha: admin123');

  } catch (error) {
    console.error('‚ùå Erro ao popular dados:', error);
  } finally {
    if (client) {
      client.release();
    }
    await pool.end();
  }
}

// Executar o seeding
seedEssentialData();